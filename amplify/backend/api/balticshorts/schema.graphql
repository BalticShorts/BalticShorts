type MovieType @model @auth(rules: [{allow: public}]) {
  id: ID!
  type: String!
}

type PersonMovieTeam @model @auth(rules: [{allow: public}]) {
  id: ID!
  movieteamID: ID! @index(name: "byMovieTeam")
  personID: ID! @index(name: "byPerson")
  MovieTeam: MovieTeam @belongsTo(fields: ["movieteamID"])
  Person: Person @belongsTo(fields: ["personID"])
  roleID: ID! @index(name: "byRole")
  Role: Role @belongsTo(fields: ["roleID"])
}

type Role @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  PersonMovieTeam: [PersonMovieTeam] @hasMany(indexName: "byRole", fields: ["id"])
  name_eng: String
}

type Person @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  surname: String!
  role: String
  description: String
  Instagram: AWSURL
  Facebook: AWSURL
  IMBD: AWSURL
  email: AWSEmail
  PersonMovieTeams: [PersonMovieTeam] @hasMany(indexName: "byPerson", fields: ["id"])
  user_id: String
}

type MoviePlaylist @model @auth(rules: [{allow: public}]) {
  id: ID!
  Creator: String!
  movies: [Movie] @manyToMany(relationName: "MovieMoviePlaylist")
  Title: String!
  is_public: Boolean!
  is_recommended: Boolean
}

type MovieTeam @model @auth(rules: [{allow: public}]) {
  id: ID!
  director: [String]
  operator: [String]
  scenario: [String]
  editor: [String]
  actors: [String]!
  costumes: [String]
  makeup: [String]
  executive_producer: [String]
  producer: [String]
  producer_org: [String]
  PersonMovieTeams: [PersonMovieTeam] @hasMany(indexName: "byMovieTeam", fields: ["id"])
  Movie: Movie @belongsTo
}

type Movie @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  name_eng: String
  type: String
  genre: String
  description: String
  description_eng: String
  screen_language: String
  captions_language: String
  origin_country: String
  length: Int
  created_year: String
  uploaded_at: String
  guid: ID
  MovieTeam: MovieTeam @hasOne
  MovieInPlaylists: [MoviePlaylist] @manyToMany(relationName: "MovieMoviePlaylist")
  times_watched: Int
  MovieType: MovieType @hasOne
}
 